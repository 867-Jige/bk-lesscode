import {
    syncApi,
    syncStage,
    syncResources,
    getLatestResourceVersion,
    createResourceVersion,
    release,
    grantPermissions,
    execApiGateWay
} from '@bkui/apigateway-nodejs-sdk'
import openApiJson from '../../system-conf/open-api.json'
import {
    transformVersionToNum
} from '../../../shared/util'

const apiName = 'bk-lesscode'
const token = {
    bk_app_code: process.env.BKPAAS_APP_ID,
    bk_app_secret: process.env.BKPAAS_APP_SECRET
}

// ApiGateWay 上生成网关
export const generateApiGateway = async () => {
    // dev 模式下不创建网关
    if (process.env.NODE_ENV === 'development') return Promise.resolve()

    // 网关管理员，默认给应用管理员授权
    const { data: applications } = await execApiGateWay({
        apiName: 'paasv3',
        path: '/system/uni_applications/query/by_id/',
        method: 'get',
        authorization: token,
        data: {
            format: 'bk_std_json',
            id: process.env.BKPAAS_APP_ID
        }
    })
    // 同步网关
    await syncApi(
        apiName,
        {
            description: 'generated by bk-lesscode',
            maintainers: applications[0].developers,
            is_public: true,
            user_auth_type: global.BKPAAS_ENGINE_REGION
        },
        token,
        'prod'
    )
    // 同步环境
    const accessUrl = JSON.parse(process.env.BKPAAS_DEFAULT_PREALLOCATED_URLS)[process.env.BKPAAS_ENVIRONMENT]
    const urlObject = new URL(accessUrl)
    let pathname = urlObject.pathname
    if (pathname.startsWith('/')) {
        pathname = pathname.slice(1)
    }
    if (pathname && !pathname.endsWith('/')) {
        pathname = pathname + '/'
    }
    await syncStage(
        apiName,
        {
            name: process.env.BKPAAS_ENVIRONMENT,
            vars: {
                subpath: pathname
            },
            proxy_http: {
                timeout: 60,
                upstreams: {
                    loadbalance: 'roundrobin',
                    hosts: [
                        {
                            host: urlObject.origin,
                            weight: '100'
                        }
                    ]
                }
            }
        },
        token,
        'prod'
    )
    // 同步资源
    await syncResources(
        apiName,
        {
            content: JSON.stringify(openApiJson)
        },
        token,
        'prod'
    )
    // 获取网关最新版本
    const { data = {} } = await getLatestResourceVersion(apiName, token, 'prod')
    const version = data.version || '0.0.0'
    if (transformVersionToNum(version) < transformVersionToNum(openApiJson.info.version)) {
        try {
            // 创建资源版本
            await createResourceVersion(
                apiName,
                {
                    version: openApiJson.info.version,
                    title: 'create new version'
                },
                token,
                'prod'
            )
            // 发布版本
            await release(
                apiName,
                {
                    version: openApiJson.info.version,
                    stage_names: [process.env.BKPAAS_ENVIRONMENT],
                    comment: 'release new version'
                },
                token,
                'prod'
            )
        } catch (error) {
            console.log(error)
        }
    }
}

export const grantApiPermissionForItsm = async () => {
    // dev 模式下不创建网关
    if (process.env.NODE_ENV === 'development') return Promise.resolve()

    // 网关为应用主动授权
    await grantPermissions(
        apiName,
        {
            target_app_code: global.ITSM_APP_CODE,
            grant_dimension: 'resource',
            resource_names: ['dataManage', 'filterTableDataByKeys', 'filterTableDataByConditions', 'executeApi']
        },
        token,
        'prod'
    )
}
